# src/api/schemas.py

from pydantic import BaseModel
from typing import List, Optional

# Pydantic models (schemas) define the structure of the API data.
# They are separate from the SQLAlchemy models (which define the DB structure).

# --- Base Schemas ---
# These contain the common fields for creation and reading.

class MessageBase(BaseModel):
    """Base schema for a message, containing common attributes."""
    message_text: Optional[str] = None

class ChannelBase(BaseModel):
    """Base schema for a channel."""
    channel_name: str


# --- "Read" Schemas ---
# These schemas are used when returning data from the API. They include
# fields that are generated by the database, like primary keys.

class Message(MessageBase):
    """Schema for reading a single message."""
    message_id: int
    # --- FIX: Change channel_key from int to str ---
    channel_key: str

    class Config:
        from_attributes = True


class Channel(ChannelBase):
    """
    Schema for reading a channel, which can optionally include a list
    of its associated messages.
    """
    channel_id: int
    messages: List[Message] = []

    class Config:
        from_attributes = True

# --- Schemas for Specific Endpoints ---

class ChannelActivity(BaseModel):
    """Schema for the channel activity endpoint response."""
    channel_name: str
    total_messages: int

class TopProduct(BaseModel):
    """Schema for the top products report."""
    product_name: str
    mention_count: int
